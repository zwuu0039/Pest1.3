@model IEnumerable<Pest1._2.Models.PestLocation>


<!-- Header & Navigation bar -->
<div class="bradcam_area breadcam_bg_1 overlay">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <h3>Distribution of Pest</h3>
            </div>
        </div>
    </div>
</div>
<!-- Header & Navigation bar end -->
<!-- Body Start-->
<br>
<br>
<br>

<div class="col-lg-12">
    <div class="row">
        <div class="col-lg-8">
            <div class="section_title text-center mb-55">
                <h3>Pests in Victoria</h3>
                <h4>Locate yourself and dicsover what pests lives near you<br></h4>
            </div>
            <div id="map" style="height: 620px; position: relative; overflow: hidden;">
                <nav id="filter-group" class="filter-group"></nav>
            </div>
            <br>
        </div>
        <div class="col-lg-4">
            <div class="section_title text-center mb-55">
                <h3>Report a pest</h3>
                <br><br>
                <h4>Seen a pest recently ? Report now !<br></h4>
                <h5>
                    Your sighting reports will be validated <br>
                    before they will appear on the map.
                </h5>
                <div class="popup_box ">
                    <div class="popup_inner">
                        <form action="#">
                            <div class="row">
                                <div class="col-xl-10 col-md-10">
                                    <input id="datepicker" placeholder="Date" required>
                                </div>
                                <div class="col-xl-10 col-md-10">
                                    <select class="form-select wide" id="default-select">
                                        <option data-display="Choose pest">Asian Toad</option>
                                        <option value="1">Boa Constrictor</option>
                                        <option value="2">Canada Goose</option>
                                        <option value="3">Cane Toad</option>
                                        <option value="4">Feral Cat</option>
                                        <option value="5">Feral Pig</option>
                                        <option value="6">Rabbit</option>
                                        <option value="7">Red Fox</option>
                                    </select>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="row">
                        <div class="col-xl-10 col-md-10 reverse-geo-controls">
                            <div class="form-group" style="flex-grow: 1; margin-right: 8px;">
                                <input id="reverse-geo-lat" class="form-control" placeholder="Latitude" required />
                            </div>
                            <div class="form-group" style="flex-grow: 1; margin-left: 8px; margin-right: 8px;">
                                <input id="reverse-geo-lng" class="form-control" placeholder="Longitude" required />
                            </div>
                            <div class="form-group" style="margin-left: 8px;">
                                <button id="reverse-locate-me" class="btn btn-warning" style="width: 150px;">Locate me</button>
                            </div>
                        </div>
                        <form action="/locate" class="form col-xl-10 col-md-10">
                            <div class="form-group">
                                <input type="text" class="form-control" id="reverse-address" placeholder="Street number and name" required />
                            </div>
                            <div class="form-group">
                                <input type="text" class="form-control" id="reverse-town" placeholder="City" required>
                            </div>
                            <div class="form-group">
                                <input type="text" class="form-control" id="reverse-zip" placeholder="ZIP code" required>
                            </div>
                        </form>
                    </div>
                    <div class="popup_inner">
                        <form action="#">
                            <div class="row">
                                <div class="col-xl-10 col-md-10">
                                    <button type="submit" class="boxed-btn3" onclick="alert('Thank you for your report! We will update the database in a week.')">
                                        Submit
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Body End-->
<!-- Map Start-->
<link rel="stylesheet"
      href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.5.1/mapbox-gl-geocoder.css"
      type="text/css" />
<script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.2/mapbox-gl-geocoder.min.js'></script>
<link href='https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css' rel='stylesheet' />

@section Scripts{
    <script src='https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js'></script>
    <script src="https://cdn.jsdelivr.net/algoliasearch/3.31/algoliasearchLite.min.js"></script>
    <script>
        (function () {
            var places = algoliasearch.initPlaces('plA7KPZMVOB3', 'dbfd369505723c5306b4b3b0f5f84cb0');

            function updateForm(response) {
                var hits = response.hits;
                var suggestion = hits[0];

                if (suggestion && suggestion.locale_names && suggestion.city) {
                    document.querySelector('#reverse-address').value = suggestion.locale_names.default[0] || '';
                    document.querySelector('#reverse-town').value = suggestion.city.default[0] || '';
                    document.querySelector('#reverse-zip').value = (suggestion.postcode || [])[0] || '';
                }
            }

            var lat, lng;

            var $button = document.querySelector('#reverse-locate-me');
            var $latInput = document.querySelector('#reverse-geo-lat');
            var $lngInput = document.querySelector('#reverse-geo-lng');

            $latInput.addEventListener('change', function (e) {
                try {
                    lat = parseFloat(e.target.value);

                    if (typeof lat !== 'undefined' && typeof lng !== 'undefined') {
                        places.reverse({
                            aroundLatLng: lat + ',' + lng,
                            hitsPerPage: 1,
                        }).then(updateForm);
                    }
                } catch (e) {
                    lat = undefined;
                }
            });

            $lngInput.addEventListener('change', function (e) {
                try {
                    lng = parseFloat(e.target.value);

                    if (typeof lat !== 'undefined' && typeof lng !== 'undefined') {
                        places.reverse({
                            aroundLatLng: lat + ',' + lng,
                            hitsPerPage: 1,
                        }).then(updateForm);
                    }
                } catch (e) {
                    lng = undefined;
                }
            });

            $button.addEventListener('click', function () {
                $button.textContent = 'Locating...';

                navigator.geolocation.getCurrentPosition(function (response) {
                    var coords = response.coords;
                    lat = coords.latitude.toFixed(6);
                    lng = coords.longitude.toFixed(6);

                    $latInput.value = lat;
                    $lngInput.value = lng;

                    $button.textContent = 'Locate me';

                    places.reverse({
                        aroundLatLng: lat + ',' + lng,
                        hitsPerPage: 1
                    }).then(updateForm);
                });
            });
        })();
    </script>
    <script>
        var pointlist = [];
        $(".position").each(function () {
            var name1 = $(".name1", this).text().trim();
            var name2 = $(".name2", this).text().trim();
            var date = $(".date", this).text().trim();
            var latitude = $(".latitude", this).text().trim();
            var longitude = $(".longitude", this).text().trim();

            var point = {
                "name1": name1,
                "name2": name2,
                "date": date,
                "latitude": latitude,
                "longitude": longitude,
            };

            pointlist.push(point);
        })

        console.log(pointlist);

        var geodata = [];
        for (i = 0; i < pointlist.length; i++) {
            var data = {
                type: 'Feature',
                geometry: {
                    type: 'Point',
                    coordinates: [pointlist[i].longitude, pointlist[i].latitude]
                },
                properties: {
                    name1: pointlist[i].name1,
                    name2: pointlist[i].name2,
                    date: pointlist[i].date
                }
            };
            geodata.push(data);
        }

        console.log(geodata);

        var records = {
            type: 'FeatureCollection',
            features: geodata
        };

        mapboxgl.accessToken = 'pk.eyJ1IjoibmFua2llIiwiYSI6ImNrMHlvbnN2ZzBoaHkzbW9iejRweGdxdjEifQ.W20SvnSB85WjL4ppoawrFg';

        var filterGroup = document.getElementById('filter-group');

        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v8',
            center: [144.963058, -37.813629],
            zoom: 12,
            maxZoom: 13,
            minZoom: 11
        });


        map.on('load', function () {
            // Add a GeoJSON source containing place coordinates and information.
            map.addSource('records', {
                'type': 'geojson',
                'data': records
            });

            records.features.forEach(function (feature) {
                var symbol = feature.properties['name2'];
                var layerID = 'poi-' + symbol;

                // Add a layer for this symbol type if it hasn't been added already.
                if (!map.getLayer(layerID)) {
                    map.addLayer({
                        'id': layerID,
                        'type': 'symbol',
                        'source': 'records',
                        'layout': {
                            'icon-image': 'marker-15',
                            'icon-allow-overlap': true,
                            'icon-size': 1.5
                        },
                        'filter': ['==', 'name2', symbol]
                    });

                    // Add checkbox and label elements for the layer.
                    var input = document.createElement('input');
                    input.type = 'checkbox';
                    input.id = layerID;
                    input.checked = true;
                    filterGroup.appendChild(input);

                    var label = document.createElement('label');
                    label.setAttribute('for', layerID);
                    label.textContent = symbol;
                    filterGroup.appendChild(label);

                    // When the checkbox changes, update the visibility of the layer.
                    input.addEventListener('change', function (e) {
                        map.setLayoutProperty(
                            layerID,
                            'visibility',
                            e.target.checked ? 'visible' : 'none'
                        );
                    });
                }
            });
        });


        // Add markers to map
        records.features.forEach(function (marker) {

            // create a HTML element for each feature
            var el = document.createElement('div');
            el.className = 'marker';

            // make a marker for each feature and add to the map
            new mapboxgl.Marker(el)
                .setLngLat(marker.geometry.coordinates)
                .setPopup(new mapboxgl.Popup({ offset: 25 }) // add popups
                    .setHTML('<h3 style="color:DodgerBlue;"><a href="' + marker.properties.name2 + '">' + marker.properties.name2 + '</a></h3>'+'<h5>Date of Apperance:<h5><p>' + marker.properties.date + '</p>'))
                .addTo(map);
        });

        map.addControl(
            new MapboxGeocoder({
                accessToken: mapboxgl.accessToken,
                mapboxgl: mapboxgl
            })
        );

        // Add geolocate control to the map.
        map.addControl(
            new mapboxgl.GeolocateControl({
                positionOptions: {
                    enableHighAccuracy: true
                },
                trackUserLocation: true
            })

        );

        map.addControl(new mapboxgl.NavigationControl(), 'bottom-right');

        var layerList = document.getElementById('menu');
        var inputs = layerList.getElementsByTagName('input');

        function switchLayer(layer) {
            var layerId = layer.target.id;
            map.setStyle('mapbox://styles/mapbox/' + layerId);
        }

        for (var i = 0; i < inputs.length; i++) {
            inputs[i].onclick = switchLayer;
        }

    </script>
}
<!-- Map End-->
<!-- css Start-->
<style>
    .reverse-geo-controls {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: flex-end;
    }
</style>
<style>
    .marker {
        background-image: url('.png');
        background-size: cover;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        cursor: pointer;
    }

    .mapboxgl-popup {
        max-width: 200px;
    }

    .mapboxgl-popup-content {
        text-align: center;
        font-family: 'Open Sans', sans-serif;
    }

    .filter-group {
        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;
        font-weight: 600;
        position: absolute;
        top: 10px;
        left: 10px;
        z-index: 1;
        border-radius: 3px;
        width: 120px;
        color: #000;
    }

        .filter-group input[type='checkbox']:first-child + label {
            border-radius: 3px 3px 0 0;
        }

        .filter-group label:last-child {
            border-radius: 0 0 3px 3px;
            border: none;
        }

        .filter-group input[type='checkbox'] {
            display: none;
        }

            .filter-group input[type='checkbox'] + label {
                background-color: #FFFFFF;
                display: block;
                cursor: pointer;
                padding: 10px;
                border-bottom: 1px solid rgba(0, 0, 0, 0.25);
            }

            .filter-group input[type='checkbox'] + label {
                background-color: #FFFFFF;
                text-transform: capitalize;
            }

                .filter-group input[type='checkbox'] + label:hover,
                .filter-group input[type='checkbox']:checked + label {
                    background-color: #FFFFFF;
                }

                    .filter-group input[type='checkbox']:checked + label:before {
                        content: '✔';
                        margin-right: 5px;
                    }
</style>
<!-- css end-->
<!-- Import fdata from database to the map-->
<table class="table" style="display:none">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Scientific_Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Vernacular_name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Event_Date__parsed)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Latitude)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Longitude)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr class="position">
            <td class="name1">
                @Html.DisplayFor(modelItem => item.Scientific_Name)
            </td>
            <td class="name2">
                @Html.DisplayFor(modelItem => item.Vernacular_name)
            </td>
            <td class="date">
                @Html.DisplayFor(modelItem => item.Event_Date__parsed)
            </td>
            <td class="latitude">
                @Html.DisplayFor(modelItem => item.Latitude)
            </td>
            <td class="longitude">
                @Html.DisplayFor(modelItem => item.Longitude)
            </td>
        </tr>
    }
</table>
<!-- Import fdata from database to the map End-->
