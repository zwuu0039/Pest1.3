@model IEnumerable<Pest1._2.Models.PestLocation>


<!-- bradcam_area_start -->
<div class="bradcam_area breadcam_bg_1 overlay">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <h3>Distribution of Pest</h3>
            </div>
        </div>
    </div>
</div>
<!-- bradcam_area_end -->
<br>
<br>
<br>
<div class="section_title text-center mb-55">
    <h3>Pests in Victoria</h3>
    <h4>Locate yourself and dicsover what pests lives near you<br></h4>
</div>

@*<div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="blog_right_sidebar">
                    <aside class="single_sidebar_widget search_widget">
                        <div class="section_title text-center mb-55">
                            <form action="#">
                                <div class="form-group">
                                    <div class="input-group mb-3">
                                        <input type="text" name="address" id="address" class="form-control" placeholder='Your Address...'
                                               required oninvalid="this.setCustomValidity('Please input your Address here')" oninput="this.setCustomValidity('')"
                                               onfocus="this.placeholder = ''"
                                               onblur="this.placeholder = 'Your Address...'">
                                        <div class="input-group-append">
                                            <button class="btn" type="button"><i class="ti-search"></i></button>
                                        </div>
                                    </div>
                                </div>
                                <button class="button rounded-0 primary-bg text-white w-100 btn_1 boxed-btn"
                                        type="submit">
                                    Find Pest near me
                                </button>
                            </form>
                        </div>
                    </aside>
                </div>
            </div>
        </div>
    </div>*@

<link rel="stylesheet"
      href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.5.1/mapbox-gl-geocoder.css"
      type="text/css" />

@*<div id="menu" style="height: 30px;" class="section_title text-center mb-55">
        <input id="streets-v11"
               type="radio"
               name="rtoggle"
               value="streets"
               checked="checked" />
        <label for="streets-v11">streets</label>
        <input id="light-v10" type="radio" name="rtoggle" value="light" />
        <label for="light-v10">light</label>
        <input id="dark-v10" type="radio" name="rtoggle" value="dark" />
        <label for="dark-v10">dark</label>
        <input id="outdoors-v11" type="radio" name="rtoggle" value="outdoors" />
        <label for="outdoors-v11">outdoors</label>
        <input id="satellite-v9" type="radio" name="rtoggle" value="satellite" />
        <label for="satellite-v9">satellite</label>
    </div>*@

<div id="map" style="height: 620px; position: relative; overflow: hidden;"></div>



@section Scripts{
    <script src='https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js'></script>


    <script>


        var pointlist = [];
        $(".position").each(function () {
            var name1 = $(".name1", this).text().trim();
            var name2 = $(".name2", this).text().trim();
            var date = $(".date", this).text().trim();
            var latitude = $(".latitude", this).text().trim();
            var longitude = $(".longitude", this).text().trim();


            var point = {
                "name1": name1,
                "name2": name2,
                "date": date,
                "latitude": latitude,
                "longitude": longitude,
            };

            pointlist.push(point);
        })
        console.log(pointlist);

        var geodata = [];
        for (i = 0; i < pointlist.length; i++) {
            var data = {
                type: 'Feature',
                geometry: {
                    type: 'Point',
                    coordinates: [pointlist[i].longitude, pointlist[i].latitude]
                },
                properties: {
                    name1: pointlist[i].name1,
                    name2: pointlist[i].name2,
                    date: pointlist[i].date
                }
            };
            geodata.push(data);
        }

        console.log(geodata);

        var geojson = {
            type: 'FeatureCollection',
            features: geodata
        };

        mapboxgl.accessToken = 'pk.eyJ1IjoibmFua2llIiwiYSI6ImNrMHlvbnN2ZzBoaHkzbW9iejRweGdxdjEifQ.W20SvnSB85WjL4ppoawrFg';
        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/nankie/ckf2hmfi92j8819pntf36jplr',
            center: [144.963058, -37.813629],
            zoom: 12,
            //pitch: 45,
            //bearing: -17.6,
            //antialias: true
        });


        // The 'building' layer in the mapbox-streets vector source contains building-height
        // data from OpenStreetMap.
        map.on('load', function () {
            // Insert the layer beneath any symbol layer.
            var layers = map.getStyle().layers;

            var labelLayerId;
            for (var i = 0; i < layers.length; i++) {
                if (layers[i].type === 'symbol' && layers[i].layout['text-field']) {
                    labelLayerId = layers[i].id;
                    break;
                }
            }

            map.addLayer(
                {
                    'id': '3d-buildings',
                    'source': 'composite',
                    'source-layer': 'building',
                    'filter': ['==', 'extrude', 'true'],
                    'type': 'fill-extrusion',
                    'minzoom': 15,
                    'paint': {
                        'fill-extrusion-color': '#aaa',

                        // use an 'interpolate' expression to add a smooth transition effect to the
                        // buildings as the user zooms in
                        'fill-extrusion-height': [
                            'interpolate',
                            ['linear'],
                            ['zoom'],
                            15,
                            0,
                            15.05,
                            ['get', 'height']
                        ],
                        'fill-extrusion-base': [
                            'interpolate',
                            ['linear'],
                            ['zoom'],
                            15,
                            0,
                            15.05,
                            ['get', 'min_height']
                        ],
                        'fill-extrusion-opacity': 0
                    }
                },
                labelLayerId
            );
        });

        // Add markers to map
        geojson.features.forEach(function (marker) {

            // create a HTML element for each feature
            var el = document.createElement('div');
            el.className = 'marker';

            // make a marker for each feature and add to the map
            new mapboxgl.Marker(el)
                .setLngLat(marker.geometry.coordinates)
                .setPopup(new mapboxgl.Popup({ offset: 25 }) // add popups
                    .setHTML('<h3>' + marker.properties.name2 + '</h3><h5>Date of Apperance:<h5><p>' + marker.properties.date + '</p><h5><a href="About">Read More</a></h5>'))
                .addTo(map);
        });

        map.addControl(
            new MapboxGeocoder({
                accessToken: mapboxgl.accessToken,
                mapboxgl: mapboxgl
            })
        );

        // Add geolocate control to the map.
        map.addControl(
            new mapboxgl.GeolocateControl({
                positionOptions: {
                    enableHighAccuracy: true
                },
                trackUserLocation: true
            })

        );

        map.addControl(new mapboxgl.NavigationControl());

        map.addControl(
            new MapboxDirections({
                accessToken: mapboxgl.accessToken
            }),
            'top-left'
        );

        var layerList = document.getElementById('menu');
        var inputs = layerList.getElementsByTagName('input');

        function switchLayer(layer) {
            var layerId = layer.target.id;
            map.setStyle('mapbox://styles/mapbox/' + layerId);
        }

        for (var i = 0; i < inputs.length; i++) {
            inputs[i].onclick = switchLayer;
        }




    </script>
}

<style>
    .marker {
        /* background-image: url('../../img/marker2.png');*/
        background-size: cover;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        cursor: pointer;
    }

    .mapboxgl-popup {
        max-width: 200px;
    }

    .mapboxgl-popup-content {
        text-align: center;
        font-family: 'Open Sans', sans-serif;
    }

    .menu {
        position: absolute;
        background: #fff;
        padding: 10px;
        font-family: 'Open Sans', sans-serif;
    }
</style>
<script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.2/mapbox-gl-geocoder.min.js'></script>
<link href='https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css' rel='stylesheet' />
@*pk.eyJ1IjoibmFua2llIiwiYSI6ImNrMHlvbnN2ZzBoaHkzbW9iejRweGdxdjEifQ.W20SvnSB85WjL4ppoawrFg*@
<script src="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js"></script>
<meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />
<script src="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js"></script>
<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.js"></script>
<link rel="stylesheet"
      href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.css"
      type="text/css" />




<table class="table" style="display:none">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Scientific_Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Vernacular_name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Event_Date__parsed)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Latitude)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Longitude)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr class="position">
            <td class="name1">
                @Html.DisplayFor(modelItem => item.Scientific_Name)
            </td>
            <td class="name2">
                @Html.DisplayFor(modelItem => item.Vernacular_name)
            </td>
            <td class="date">
                @Html.DisplayFor(modelItem => item.Event_Date__parsed)
            </td>
            <td class="latitude">
                @Html.DisplayFor(modelItem => item.Latitude)
            </td>
            <td class="longitude">
                @Html.DisplayFor(modelItem => item.Longitude)
            </td>
            @*<td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.column_0 }) |
                    @Html.ActionLink("Details", "Details", new { id = item.column_0 }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.column_0 })
                </td>*@
        </tr>
    }
</table>
